
//npx prisma generate --schema=prisma/schema-postgresql.prisma
generator client {
    provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  PARKING_OWNER
}

enum ParkingStatus{
  OPEN
  CLOSED
  INACTIVE 
}

enum Dnitype{
  DNI
  PASSPORT
}

enum RequestStatus{
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}
model User{
    id              String    @id @default(cuid())
    email           String    @unique
    name            String
    surname         String
    nationality     String
    dni             String    @unique @default("999999999")
    dniCountry      String    @default("No countryDNI")
    dniType         Dnitype   @default(DNI)
    creditCard      String?
    birthDate       DateTime
    money           Float     @default(0)
    averageRating   Float     @default(0)
    starcount       Int       @default(0)
    phone           String
    password        String
    role            Role      @default(USER)
    isActive        Boolean   @default(true)
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deleted         Boolean   @default(false)
    deletedAt       DateTime?
    cars            Car[]
    parkings        Parking[]
    parkingRequests ParkingRequest[]
}

model Car{
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  plate           String   @unique
  brand           String?
  model           String?
  color           String?
  year            Int?
  fabricNumber   String?
  parkingRequests ParkingRequest[]
}

model Parking{
  id              String          @id @default(cuid())
  ownerId         String
  owner           User            @relation(fields: [ownerId], references: [id])
  name            String
  description     String?
  address         String
  latitude        String
  longitude       String
  pricePerHour    Float
  status          ParkingStatus   @default(OPEN)
  placesToPark    Int             
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  requests        ParkingRequest[]
}

model ParkingRequest{
  id              String          @id @default(cuid())
  parkingId       String
  parking         Parking         @relation(fields: [parkingId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  carId           String
  car             Car             @relation(fields: [carId], references: [id])
  status          RequestStatus   @default(PENDING)
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  hasTip          Boolean         @default(false)
  tip             Float           @default(0)
}